{"version":3,"sources":["App.js","index.js"],"names":["App","emojiWeKnow","emojiArray","Object","keys","useState","meaning","setmeaning","className","id","placeholder","onChange","event","e","emoji","target","value","trim","currentMeaning","undefined","inputEventHandler","style","fontSize","padding","cursor","width","maxWidth","margin","map","item","onClick","marginLeft","rootElement","document","getElementById","createRoot","render"],"mappings":"mKAGe,SAASA,IACtB,IAAIC,EAAc,CAChB,eAAM,gBACN,eAAM,2BACN,eAAM,iCACN,eAAM,gBACN,eAAM,0BACN,eAAM,2BACN,eAAM,gCACN,eAAM,iBACN,eAAM,gBACN,eAAM,cACN,eAAM,YACN,eAAM,4BAEJC,EAAaC,OAAOC,KAAKH,GACzB,EAAwBI,mBAAS,IAAG,mBAAnCC,EAAO,KAAEC,EAAU,KAexB,OACE,sBAAKC,UAAU,MAAK,UAClB,oBAAIC,GAAG,UAAS,2BAChB,uBACEC,YAAY,8CACZC,SAAU,SAACC,GAAK,OAlBtB,SAA2BC,GACzB,IAAIC,EAAQD,EAAEE,OAAOC,MACrBF,EAAQA,EAAMG,KAAK,KACnB,IAAIC,EAAiBjB,EAAYa,QACVK,IAAnBD,IACFA,EAAiB,sCAEnBX,EAAWW,EACb,CAU2BE,CAAkBR,EAAM,EAC7CS,MAAO,CACLC,SAAU,SACVC,QAAS,SACTC,OAAQ,UACRC,MAAO,SAGX,mBAAGhB,GAAG,UAAS,SAAEH,IACjB,qBACEe,MAAO,CACLK,SAAU,MACVC,OAAQ,QACR,SAEDzB,EAAW0B,KAAI,SAACC,GACf,OACE,sBAEEC,QAAS,WA1BnBvB,EAAWN,EA0BqC4B,GAAK,EAC3CR,MAAO,CACLU,WAAY,SACZT,SAAU,OACVE,OAAQ,WACR,SAEDK,GARIA,EAWX,QAIR,CCnEA,IAAMG,EAAcC,SAASC,eAAe,QAC/BC,qBAAWH,GAEnBI,OACH,cAAC,aAAU,UACT,cAACpC,EAAG,M","file":"static/js/main.73e0e3ce.chunk.js","sourcesContent":["import \"./styles.css\";\nimport { useState } from \"react\";\n\nexport default function App() {\n  var emojiWeKnow = {\n    \"ðŸ¥º\": \"Pleading Face\",\n    \"ðŸ¥°\": \"Smiling Face with Hearts\",\n    \"ðŸ˜Š\": \"Smiling Face with Smiling Eyes\",\n    \"ðŸ˜€\": \"Grinning Face\",\n    \"ðŸ˜†\": \"Grinning Squinting Face\",\n    \"ðŸ˜œ\": \"Winking Face with Tongue\",\n    \"ðŸ¤—\": \" Smiling Face with Open Hands\",\n    \"ðŸ¤”\": \" Thinking Face\",\n    \"ðŸ¤«\": \"Shushing Face\",\n    \"ðŸ˜¯\": \"Hushed Face\",\n    \"ðŸ¤ª\": \"Zany Face\",\n    \"ðŸ˜…\": \"Grinning Face with Sweat\"\n  };\n  var emojiArray = Object.keys(emojiWeKnow);\n  var [meaning, setmeaning] = useState(\"\");\n\n  function inputEventHandler(e) {\n    let emoji = e.target.value;\n    emoji = emoji.trim(\" \"); //remove extra space added in emoji\n    var currentMeaning = emojiWeKnow[emoji];\n    if (currentMeaning === undefined) {\n      currentMeaning = \"we do not have thi in our database\";\n    }\n    setmeaning(currentMeaning);\n  }\n\n  function emojoClickEventHandler(emoji) {\n    setmeaning(emojiWeKnow[emoji]);\n  }\n  return (\n    <div className=\"App\">\n      <h1 id=\"heading\">inside outttt</h1>\n      <input\n        placeholder=\"put an emoji here to know the meaning of it\"\n        onChange={(event) => inputEventHandler(event)}\n        style={{\n          fontSize: \"1.5rem\",\n          padding: \"0.5rem\",\n          cursor: \"pointer\",\n          width: \"80%\"\n        }}\n      />\n      <p id=\"meaning\">{meaning}</p>\n      <div\n        style={{\n          maxWidth: \"50%\",\n          margin: \"auto\"\n        }}\n      >\n        {emojiArray.map((item) => {\n          return (\n            <span\n              key={item}\n              onClick={() => emojoClickEventHandler(item)}\n              style={{\n                marginLeft: \"0.7rem\",\n                fontSize: \"2rem\",\n                cursor: \"pointer\"\n              }}\n            >\n              {item}\n            </span>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}